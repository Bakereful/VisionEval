Di <- sort(unique(GeoDef_df$District))
Ma <- sort(unique(GeoDef_df$MetroArea[!is.na(GeoDef_df$MetroArea)]))
# More checks to be added
# Create HDF5 data store
#-----------------------
FileName <- paste0(ScenDir, "/data_store.h5")
if(file.exists(FileName)) {
file.remove(FileName)
}
H5File <- H5Fcreate(FileName)
h5writeAttribute(ScenName, H5File, "SCENARIO")
h5writeAttribute(as.character(Sys.time()), H5File, "DATE")
# Create a model group to store the geography lookup and other model files
#-------------------------------------------------------------------------
h5createGroup(H5File, "Model")
# Store the geographic lookup
h5createGroup(H5File, "Model/GeoLookup")
for (name in names(GeoDef_df)) {
DatasetName <- paste("Model/GeoLookup/", name, sep = "")
h5createDataset(H5File, DatasetName, dims = nrow(GeoDef_df),
storage.mode = "character", size = 40)
h5write(GeoDef_df[[name]], H5File, DatasetName)
}
# Create input groups and write year and geography fields
#--------------------------------------------------------
# Create Inputs group
h5createGroup(H5File, "Inputs")
# Create Inputs/Region group and add Year and GeoId data
h5createGroup(H5File, "Inputs/Region")
h5createDataset(H5File, "Inputs/Region/Year", dims = length(Yr),
storage.mode = "integer")
h5write(Yr, H5File, "Inputs/Region/Year")
h5createDataset(H5File, "Inputs/Region/GeoId", dims = length(Yr),
storage.mode = "character", size = 40)
h5write(rep("Region", length(Yr)), H5File, "Inputs/Region/GeoId")
# Create Inputs/Division group and add Year and GeoId data
h5createGroup(H5File, "Inputs/Division")
h5createDataset(H5File, "Inputs/Division/Year",
dims = length(Yr) * length(Dv),
storage.mode = "integer")
h5write(rep(Yr, each = length(Dv)), H5File, "Inputs/Division/Year")
h5createDataset(H5File, "Inputs/Division/GeoId",
dims = length(Yr) * length(Dv),
storage.mode = "character", size = 40)
h5write(rep(Dv, length(Yr)), H5File, "Inputs/Division/GeoId")
# Create Inputs/District group and add Year and GeoId data
h5createGroup(H5File, "Inputs/District")
if (!all(is.na(Di))) {
h5createDataset(H5File, "Inputs/District/Year",
dims = length(Yr) * length(Di),
storage.mode = "integer")
h5write(rep(Yr, each = length(Di)), H5File, "Inputs/District/Year")
h5createDataset(H5File, "Inputs/District/GeoId",
dims = length(Yr) * length(Di),
storage.mode = "character", size = 40)
h5write(rep(Di, length(Yr)), H5File, "Inputs/District/GeoId")
}
# Create Inputs/MetroArea group and add Year and GeoId data
h5createGroup(H5File, "Inputs/MetroArea")
h5createDataset(H5File, "Inputs/MetroArea/Year",
dims = length(Yr) * length(Ma),
storage.mode = "integer")
h5write(rep(Yr, each = length(Ma)), H5File, "Inputs/MetroArea/Year")
h5createDataset(H5File, "Inputs/MetroArea/GeoId",
dims = length(Yr) * length(Ma),
storage.mode = "character", size = 40)
h5write(rep(Ma, length(Yr)), H5File, "Inputs/MetroArea/GeoId")
# Create output groups
#---------------------
h5createGroup(H5File,"Outputs")
for(yr in as.character(ScenYears)) {
YearGroup <- paste0("Outputs/", yr)
h5createGroup(H5File, YearGroup)
OutputGroups <- c("Region", "Metropolitan", "Division", "District", "Household")
for(group in OutputGroups) {
GroupName <- paste0(YearGroup, "/", group)
h5createGroup(H5File, GroupName)
}
}
# Close the file
#---------------
H5Fclose( H5File )
Dv <<- Dv
Di <<- Di
Ma <<- Ma
TRUE
}
initDataStore(ScenDir = "../../../../test_scenario",
ScenYears = c("2010", "2035"),
ScenName = "Test Scenario" )
GeoDef_df <- read.csv(paste0(ScenDir, "/geo_def.csv"), as.is = TRUE)
str(GeoDef_df)
nrow(GeoDef_df)
names(GeoDef_df)
# Load and check geographic definitions
#--------------------------------------
GeoDef_df <- read.csv(paste0(ScenDir, "/geo_def.csv"), as.is = TRUE)
CheckNames <- names(GeoDef_df) %in% c("Division", "District", "MetroArea")
if (!all(CheckNames)) {
WrongNames <- paste(names(GeoDef_df)[CheckNames], collapse="&")
Message <- paste("Names", WrongNames, "are incorrect.")
stop(Message)
}
Yr <- ScenYears
Dv <- sort(unique(GeoDef_df$Division))
Di <- sort(unique(GeoDef_df$District))
Ma <- sort(unique(GeoDef_df$MetroArea[!is.na(GeoDef_df$MetroArea)]))
# More checks to be added
# Create HDF5 data store
#-----------------------
FileName <- paste0(ScenDir, "/data_store.h5")
if(file.exists(FileName)) {
file.remove(FileName)
}
H5File <- H5Fcreate(FileName)
h5writeAttribute(ScenName, H5File, "SCENARIO")
h5writeAttribute(as.character(Sys.time()), H5File, "DATE")
# Create a model group to store the geography lookup and other model files
#-------------------------------------------------------------------------
h5createGroup(H5File, "Model")
# Store the geographic lookup
h5createGroup(H5File, "Model/GeoLookup")
names(GeoDef_df)
name <- "Division"
DatasetName <- paste("Model/GeoLookup/", name, sep = "")
DatasetName
h5createDataset(H5File, DatasetName, dims = nrow(GeoDef_df),
storage.mode = "character", size = 40)
GeoDef_df[[name]]
h5write(GeoDef_df[[name]], H5File, DatasetName)
name <- "MetroArea"
DatasetName <- paste("Model/GeoLookup/", name, sep = "")
h5createDataset(H5File, DatasetName, dims = nrow(GeoDef_df),
storage.mode = "character", size = 40)
h5write(GeoDef_df[[name]], H5File, DatasetName)
name <- "District"
DatasetName <- paste("Model/GeoLookup/", name, sep = "")
h5createDataset(H5File, DatasetName, dims = nrow(GeoDef_df),
storage.mode = "character", size = 40)
h5write(GeoDef_df[[name]], H5File, DatasetName)
GeoDef_df[[name]]
GeoDef_df <- read.csv(paste0(ScenDir, "/geo_def.csv"), as.is = TRUE)
GeoDef_df[is.na(GeoDef_df)] <- "NA"
GeoDef_df
str(GeoDef_df)
Yr <- ScenYears
Dv <- sort(unique(GeoDef_df$Division))
Di <- sort(unique(GeoDef_df$District))
Ma <- sort(unique(GeoDef_df$MetroArea[!is.na(GeoDef_df$MetroArea)]))
Di
Ma
GeoDef_df <- read.csv(paste0(ScenDir, "/geo_def.csv"), as.is = TRUE)
Yr <- ScenYears
Dv <- sort(unique(GeoDef_df$Division))
Di <- sort(unique(GeoDef_df$District))
Ma <- sort(unique(GeoDef_df$MetroArea[!is.na(GeoDef_df$MetroArea)]))
Ma
Di
GeoDef_df[is.na(GeoDef_df)] <- "NA"
rm(DatasetName, Di, Dv, name, Ma, Yr)
Di
Di <- logical(0)
typeof(Di)
length(Di)
Di == logical(0)
initDataStore <- function(ScenDir, ScenYears, ScenName) {
# Load and check geographic definitions
#--------------------------------------
GeoDef_df <- read.csv(paste0(ScenDir, "/geo_def.csv"), as.is = TRUE)
CheckNames <- names(GeoDef_df) %in% c("Division", "District", "MetroArea")
if (!all(CheckNames)) {
WrongNames <- paste(names(GeoDef_df)[CheckNames], collapse="&")
Message <- paste("Names", WrongNames, "are incorrect.")
stop(Message)
}
# Create abbreviation vectors
Yr <- ScenYears
Dv <- sort(unique(GeoDef_df$Division))
Di <- sort(unique(GeoDef_df$District))
Ma <- sort(unique(GeoDef_df$MetroArea[!is.na(GeoDef_df$MetroArea)]))
# Convert NA values to "NA"
GeoDef_df[is.na(GeoDef_df)] <- "NA"
# More checks to be added
# Create HDF5 data store
#-----------------------
FileName <- paste0(ScenDir, "/data_store.h5")
if(file.exists(FileName)) {
file.remove(FileName)
}
H5File <- H5Fcreate(FileName)
h5writeAttribute(ScenName, H5File, "SCENARIO")
h5writeAttribute(as.character(Sys.time()), H5File, "DATE")
# Create a model group to store the geography lookup and other model files
#-------------------------------------------------------------------------
h5createGroup(H5File, "Model")
# Store the geographic lookup
h5createGroup(H5File, "Model/GeoLookup")
for (name in names(GeoDef_df)) {
DatasetName <- paste("Model/GeoLookup/", name, sep = "")
h5createDataset(H5File, DatasetName, dims = nrow(GeoDef_df),
storage.mode = "character", size = 40)
h5write(GeoDef_df[[name]], H5File, DatasetName)
}
# Create input groups and write year and geography fields
#--------------------------------------------------------
# Create Inputs group
h5createGroup(H5File, "Inputs")
# Create Inputs/Region group and add Year and GeoId data
h5createGroup(H5File, "Inputs/Region")
h5createDataset(H5File, "Inputs/Region/Year", dims = length(Yr),
storage.mode = "integer")
h5write(Yr, H5File, "Inputs/Region/Year")
h5createDataset(H5File, "Inputs/Region/GeoId", dims = length(Yr),
storage.mode = "character", size = 40)
h5write(rep("Region", length(Yr)), H5File, "Inputs/Region/GeoId")
# Create Inputs/Division group and add Year and GeoId data
h5createGroup(H5File, "Inputs/Division")
h5createDataset(H5File, "Inputs/Division/Year",
dims = length(Yr) * length(Dv),
storage.mode = "integer")
h5write(rep(Yr, each = length(Dv)), H5File, "Inputs/Division/Year")
h5createDataset(H5File, "Inputs/Division/GeoId",
dims = length(Yr) * length(Dv),
storage.mode = "character", size = 40)
h5write(rep(Dv, length(Yr)), H5File, "Inputs/Division/GeoId")
# Create Inputs/District group and add Year and GeoId data
h5createGroup(H5File, "Inputs/District")
if (length(Di) != 0) {
h5createDataset(H5File, "Inputs/District/Year",
dims = length(Yr) * length(Di),
storage.mode = "integer")
h5write(rep(Yr, each = length(Di)), H5File, "Inputs/District/Year")
h5createDataset(H5File, "Inputs/District/GeoId",
dims = length(Yr) * length(Di),
storage.mode = "character", size = 40)
h5write(rep(Di, length(Yr)), H5File, "Inputs/District/GeoId")
}
# Create Inputs/MetroArea group and add Year and GeoId data
h5createGroup(H5File, "Inputs/MetroArea")
h5createDataset(H5File, "Inputs/MetroArea/Year",
dims = length(Yr) * length(Ma),
storage.mode = "integer")
h5write(rep(Yr, each = length(Ma)), H5File, "Inputs/MetroArea/Year")
h5createDataset(H5File, "Inputs/MetroArea/GeoId",
dims = length(Yr) * length(Ma),
storage.mode = "character", size = 40)
h5write(rep(Ma, length(Yr)), H5File, "Inputs/MetroArea/GeoId")
# Create output groups
#---------------------
h5createGroup(H5File,"Outputs")
for(yr in as.character(ScenYears)) {
YearGroup <- paste0("Outputs/", yr)
h5createGroup(H5File, YearGroup)
OutputGroups <- c("Region", "Metropolitan", "Division", "District", "Household")
for(group in OutputGroups) {
GroupName <- paste0(YearGroup, "/", group)
h5createGroup(H5File, GroupName)
}
}
# Close the file
#---------------
H5Fclose( H5File )
Dv <<- Dv
Di <<- Di
Ma <<- Ma
TRUE
}
initDataStore(ScenDir = "../../../../test_scenario",
ScenYears = c("2010", "2035"),
ScenName = "Test Scenario" )
library(rhdf5)
initDataStore <- function(ScenDir, ScenYears, ScenName) {
# Load and check geographic definitions
#--------------------------------------
GeoDef_df <- read.csv(paste0(ScenDir, "/geo_def.csv"), as.is = TRUE)
CheckNames <- names(GeoDef_df) %in% c("Division", "District", "MetroArea")
if (!all(CheckNames)) {
WrongNames <- paste(names(GeoDef_df)[CheckNames], collapse="&")
Message <- paste("Names", WrongNames, "are incorrect.")
stop(Message)
}
# Create abbreviation vectors
Yr <- ScenYears
Dv <- sort(unique(GeoDef_df$Division))
Di <- sort(unique(GeoDef_df$District))
Ma <- sort(unique(GeoDef_df$MetroArea[!is.na(GeoDef_df$MetroArea)]))
# Convert NA values to "NA"
GeoDef_df[is.na(GeoDef_df)] <- "NA"
# More checks to be added
# Create HDF5 data store
#-----------------------
FileName <- paste0(ScenDir, "/data_store.h5")
if(file.exists(FileName)) {
file.remove(FileName)
}
H5File <- H5Fcreate(FileName)
h5writeAttribute(ScenName, H5File, "SCENARIO")
h5writeAttribute(as.character(Sys.time()), H5File, "DATE")
# Create a model group to store the geography lookup and other model files
#-------------------------------------------------------------------------
h5createGroup(H5File, "Model")
# Store the geographic lookup
h5createGroup(H5File, "Model/GeoLookup")
for (name in names(GeoDef_df)) {
DatasetName <- paste("Model/GeoLookup/", name, sep = "")
h5createDataset(H5File, DatasetName, dims = nrow(GeoDef_df),
storage.mode = "character", size = 40)
h5write(GeoDef_df[[name]], H5File, DatasetName)
}
# Create input groups and write year and geography fields
#--------------------------------------------------------
# Create Inputs group
h5createGroup(H5File, "Inputs")
# Create Inputs/Region group and add Year and GeoId data
h5createGroup(H5File, "Inputs/Region")
h5createDataset(H5File, "Inputs/Region/Year", dims = length(Yr),
storage.mode = "integer")
h5write(Yr, H5File, "Inputs/Region/Year")
h5createDataset(H5File, "Inputs/Region/GeoId", dims = length(Yr),
storage.mode = "character", size = 40)
h5write(rep("Region", length(Yr)), H5File, "Inputs/Region/GeoId")
# Create Inputs/Division group and add Year and GeoId data
h5createGroup(H5File, "Inputs/Division")
h5createDataset(H5File, "Inputs/Division/Year",
dims = length(Yr) * length(Dv),
storage.mode = "integer")
h5write(rep(Yr, each = length(Dv)), H5File, "Inputs/Division/Year")
h5createDataset(H5File, "Inputs/Division/GeoId",
dims = length(Yr) * length(Dv),
storage.mode = "character", size = 40)
h5write(rep(Dv, length(Yr)), H5File, "Inputs/Division/GeoId")
# Create Inputs/District group and add Year and GeoId data
h5createGroup(H5File, "Inputs/District")
if (length(Di) != 0) {
h5createDataset(H5File, "Inputs/District/Year",
dims = length(Yr) * length(Di),
storage.mode = "integer")
h5write(rep(Yr, each = length(Di)), H5File, "Inputs/District/Year")
h5createDataset(H5File, "Inputs/District/GeoId",
dims = length(Yr) * length(Di),
storage.mode = "character", size = 40)
h5write(rep(Di, length(Yr)), H5File, "Inputs/District/GeoId")
}
# Create Inputs/MetroArea group and add Year and GeoId data
h5createGroup(H5File, "Inputs/MetroArea")
h5createDataset(H5File, "Inputs/MetroArea/Year",
dims = length(Yr) * length(Ma),
storage.mode = "integer")
h5write(rep(Yr, each = length(Ma)), H5File, "Inputs/MetroArea/Year")
h5createDataset(H5File, "Inputs/MetroArea/GeoId",
dims = length(Yr) * length(Ma),
storage.mode = "character", size = 40)
h5write(rep(Ma, length(Yr)), H5File, "Inputs/MetroArea/GeoId")
# Create output groups
#---------------------
h5createGroup(H5File,"Outputs")
for(yr in as.character(ScenYears)) {
YearGroup <- paste0("Outputs/", yr)
h5createGroup(H5File, YearGroup)
OutputGroups <- c("Region", "Metropolitan", "Division", "District", "Household")
for(group in OutputGroups) {
GroupName <- paste0(YearGroup, "/", group)
h5createGroup(H5File, GroupName)
}
}
# Close the file
#---------------
H5Fclose(H5File)
Dv <<- Dv
Di <<- Di
Ma <<- Ma
TRUE
}
initDataStore(ScenDir = "../../../../test_scenario",
ScenYears = c("2010", "2035"),
ScenName = "Test Scenario" )
h5ls("../../../../test_scenario/data_store.h5")
?try
initDataStore <- function(ScenDir, ScenYears, ScenName) {
# Load and check geographic definitions
#--------------------------------------
GeoDef_df <- read.csv(paste0(ScenDir, "/geo_def.csv"), as.is = TRUE)
CheckNames <- names(GeoDef_df) %in% c("Division", "District", "MetroArea")
if (!all(CheckNames)) {
WrongNames <- paste(names(GeoDef_df)[CheckNames], collapse="&")
Message <- paste("Names", WrongNames, "are incorrect.")
stop(Message)
}
# Create abbreviation vectors
Yr <- ScenYears
Dv <- sort(unique(GeoDef_df$Division))
Di <- sort(unique(GeoDef_df$District))
Ma <- sort(unique(GeoDef_df$MetroArea[!is.na(GeoDef_df$MetroArea)]))
# Convert NA values to "NA"
GeoDef_df[is.na(GeoDef_df)] <- "NA"
# More checks to be added
# Create HDF5 data store
#-----------------------
FileName <- paste0(ScenDir, "/data_store.h5")
if(file.exists(FileName)) {
file.remove(FileName)
}
H5File <- H5Fcreate(FileName)
h5writeAttribute(ScenName, H5File, "SCENARIO")
h5writeAttribute(as.character(Sys.time()), H5File, "DATE")
H5Fclose(H5File)
# Create a model group to store the geography lookup and other model files
#-------------------------------------------------------------------------
h5createGroup(FileName, "Model")
# Store the geographic lookup
h5createGroup(FileName, "Model/GeoLookup")
for (name in names(GeoDef_df)) {
DatasetName <- paste("Model/GeoLookup/", name, sep = "")
h5createDataset(FileName, DatasetName, dims = nrow(GeoDef_df),
storage.mode = "character", size = 40)
h5write(GeoDef_df[[name]], FileName, DatasetName)
}
}
initDataStore(ScenDir = "../../../../test_scenario",
ScenYears = c("2010", "2035"),
ScenName = "Test Scenario" )
h5ls("../../../../test_scenario/data_store.h5")
?h5writeAttribute
initDataStore <- function(ScenDir, ScenYears, ScenName) {
# Load and check geographic definitions
GeoDef_df <- read.csv(paste0(ScenDir, "/geo_def.csv"), as.is = TRUE)
CheckNames <- names(GeoDef_df) %in% c("Division", "District", "MetroArea")
if (!all(CheckNames)) {
WrongNames <- paste(names(GeoDef_df)[CheckNames], collapse="&")
Message <- paste("Names", WrongNames, "are incorrect.")
stop(Message)
}
# Create abbreviation vectors
Yr <- ScenYears
Dv <- sort(unique(GeoDef_df$Division))
Di <- sort(unique(GeoDef_df$District))
Ma <- sort(unique(GeoDef_df$MetroArea[!is.na(GeoDef_df$MetroArea)]))
# More checks to be added
# Create HDF5 data store file
FileName <- paste0(ScenDir, "/data_store.h5")
if(file.exists(FileName)) {
file.remove(FileName)
}
H5File <- H5Fcreate(FileName)
h5writeAttribute(ScenName, H5File, "SCENARIO")
h5writeAttribute(as.character(Sys.time()), H5File, "DATE")
H5Fclose(H5File)
# Create major groupings (Model, Inputs, Outputs)
h5createGroup(FileName, "Model")
h5createGroup(FileName, "Inputs")
h5createGroup(FileName, "Outputs")
# Store the geographic lookup table in the Model group
GeoDef_df[is.na(GeoDef_df)] <- "NA"
h5createDatagroup(FileName, "Model/GeoLookup", nrow(GeoDef_df))
}
initDataStore(ScenDir = "../../../../test_scenario",
ScenYears = c("2010", "2035"),
ScenName = "Test Scenario" )
h5createDatagroup <- function(file, group, length = 0) {
h5createGroup(file, group)
h5writeAttribute(group, file, "LENGTH")
}
h5createDatagroup <- function(FileName, Group, Length = 0) {
H5File <- H5Fopen(FileName)
H5Group <- H5Gcreate(H5File, Group)
h5writeAttribute(Length, H5Group, "LENGTH")
H5Gclose(H5Group)
H5Fclose(H5File)
}
h5createDatagroup <- function(FileName, Group, Length = 0) {
H5File <- H5Fopen(FileName)
H5Group <- H5Gcreate(H5File, Group)
h5writeAttribute(Length, H5Group, "LENGTH")
H5Gclose(H5Group)
H5Fclose(H5File)
}
initDataStore <- function(ScenDir, ScenYears, ScenName) {
# Load and check geographic definitions
GeoDef_df <- read.csv(paste0(ScenDir, "/geo_def.csv"), as.is = TRUE)
CheckNames <- names(GeoDef_df) %in% c("Division", "District", "MetroArea")
if (!all(CheckNames)) {
WrongNames <- paste(names(GeoDef_df)[CheckNames], collapse="&")
Message <- paste("Names", WrongNames, "are incorrect.")
stop(Message)
}
# Create abbreviation vectors
Yr <- ScenYears
Dv <- sort(unique(GeoDef_df$Division))
Di <- sort(unique(GeoDef_df$District))
Ma <- sort(unique(GeoDef_df$MetroArea[!is.na(GeoDef_df$MetroArea)]))
# More checks to be added
# Create HDF5 data store file
FileName <- paste0(ScenDir, "/data_store.h5")
if(file.exists(FileName)) {
file.remove(FileName)
}
H5File <- H5Fcreate(FileName)
h5writeAttribute(ScenName, H5File, "SCENARIO")
h5writeAttribute(as.character(Sys.time()), H5File, "DATE")
H5Fclose(H5File)
# Create major groupings (Model, Inputs, Outputs)
h5createGroup(FileName, "Model")
h5createGroup(FileName, "Inputs")
h5createGroup(FileName, "Outputs")
# Store the geographic lookup table in the Model group
GeoDef_df[is.na(GeoDef_df)] <- "NA"
h5createDatagroup(FileName, "Model/GeoLookup", nrow(GeoDef_df))
}
initDataStore(ScenDir = "../../../../test_scenario",
ScenYears = c("2010", "2035"),
ScenName = "Test Scenario" )
h5ls("../../../../test_scenario/data_store.h5")
